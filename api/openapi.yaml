openapi: 3.0.0
info:
  title: Agile Fridge RESTful API
  version: 1.0.0
servers:
- url: /
paths:
  /issues:
    delete:
      operationId: deleteIssue
      parameters:
      - explode: true
        in: query
        name: id
        required: true
        schema:
          type: string
        style: form
      responses:
        "204":
          description: The issue was deleted
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Client error
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Server error
      summary: Deletes an issue
    get:
      operationId: listIssues
      parameters:
      - explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: id
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: type
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: createTime
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: updateTime
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: projectId
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: owner
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: creator
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: assignee
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: requestor
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Issue'
                type: array
          description: Successfully returned issues
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Client error
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Server error
      summary: Optionally looks for issues that comply with the filters applied
    patch:
      operationId: updateIssue
      parameters:
      - explode: true
        in: query
        name: id
        required: true
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueUpdate'
        required: true
      responses:
        "204":
          description: The issue was updated
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Client error
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Server error
      summary: Updates an issue
    post:
      operationId: createIssue
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueCreate'
        required: true
      responses:
        "204":
          description: The issue was created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Client error
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Server error
      summary: Creates an issue
  /user:
    delete:
      operationId: deleteUser
      parameters:
      - explode: true
        in: query
        name: id
        required: true
        schema:
          type: string
        style: form
      responses:
        "204":
          description: The user was deleted
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Client error
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Server error
      summary: Deletes a user
    get:
      operationId: retrieveUser
      parameters:
      - explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: id
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
          description: Successfully returned users
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Client error
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Server error
      summary: Retrieves information about the user
    patch:
      operationId: updateUser
      parameters:
      - explode: true
        in: query
        name: id
        required: true
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
        required: true
      responses:
        "204":
          description: The user was updated
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Client error
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Server error
      summary: Updates a user
    post:
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
        required: true
      responses:
        "204":
          description: The user was created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Client error
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Server error
      summary: Creates a user
  /user/session:
    post:
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginData'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
          description: The session was created successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Client error
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Server error
      summary: Login
  /projects:
    delete:
      operationId: deleteProject
      parameters:
      - explode: true
        in: query
        name: cascadingDelete
        required: false
        schema:
          type: boolean
        style: form
      - explode: true
        in: query
        name: id
        required: true
        schema:
          type: string
        style: form
      responses:
        "204":
          description: The project was deleted
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Client error
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Server error
      summary: Deletes a project
    get:
      operationId: listProjects
      parameters:
      - explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: id
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: createTime
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: updateTime
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: owner
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: creator
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Project'
                type: array
          description: Successfully returned projects
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Client error
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Server error
      summary: Optionally looks for projects that comply with the filters applied
    patch:
      operationId: updateProjects
      parameters:
      - explode: true
        in: query
        name: id
        required: true
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectUpdate'
        required: true
      responses:
        "204":
          description: The project was updated
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Client error
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Server error
      summary: Updates a project
    post:
      operationId: createProject
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectCreate'
        required: true
      responses:
        "204":
          description: The project was created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Client error
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Server error
      summary: Creates a project
components:
  parameters:
    Id:
      explode: true
      in: query
      name: id
      required: false
      schema:
        type: string
      style: form
    RequiredId:
      explode: true
      in: query
      name: id
      required: true
      schema:
        type: string
      style: form
  schemas:
    ProjectChild:
      properties:
        projectId:
          type: string
      type: object
    IssueCreate:
      allOf:
      - required:
        - body
        - projectId
        - title
      - $ref: '#/components/schemas/ProjectChild'
      - $ref: '#/components/schemas/DescriptiveMetadata'
      - $ref: '#/components/schemas/MutableOwnershipMetadata'
    IssueUpdate:
      allOf:
      - $ref: '#/components/schemas/ProjectChild'
      - $ref: '#/components/schemas/DescriptiveMetadata'
      - $ref: '#/components/schemas/MutableOwnershipMetadata'
    Issue:
      allOf:
      - $ref: '#/components/schemas/IdentifyingData'
      - $ref: '#/components/schemas/MutationTimestamps'
      - $ref: '#/components/schemas/ProjectChild'
      - $ref: '#/components/schemas/DescriptiveMetadata'
      - $ref: '#/components/schemas/OwnershipMetadata'
    UserInCommonDetails:
      allOf:
        - type: object
          properties:
            displayName:
              type: string
        - $ref: '#/components/schemas/UserInCommonAuthorizationDetails'
    UserInCommonAuthorizationDetails:
      properties:
        email:
          type: string
      type: object
    UserGithubDetails:
      properties:
        githubId:
          type: string
      type: object
    UserEmailDetails:
      properties:
        password:
          type: string
      type: object
    UserAppleDetails:
      properties:
        appleTokenAuthorizationCode:
          type: string
      type: object
    UserHasLoggedInWithGithub:
      properties:
        hasLoggedInWithGithub:
          type: boolean
      required:
      - hasLoggedInWithGithub
      type: object
    UserHasLoggedInWithEmail:
      properties:
        hasLoggedInWithEmail:
          type: boolean
      required:
      - hasLoggedInWithEmail
      type: object
    UserHasLoggedInWithApple:
      properties:
        hasLoggedInWithApple:
          type: boolean
      required:
      - hasLoggedInWithApple
      type: object
    UserCreate:
      allOf:
      - $ref: '#/components/schemas/UserInCommonDetails'
      - $ref: '#/components/schemas/UserGithubDetails'
      - $ref: '#/components/schemas/UserEmailDetails'
      - $ref: '#/components/schemas/UserAppleDetails'
      - required:
        - displayName
        - email
      - anyOf:
        - required:
          - githubId
        - required:
          - password
        - required:
          - appleId
    UserUpdate:
      anyOf:
      - $ref: '#/components/schemas/UserInCommonDetails'
      - $ref: '#/components/schemas/UserGithubDetails'
      - $ref: '#/components/schemas/UserEmailDetails'
      - $ref: '#/components/schemas/UserAppleDetails'
      description: if you delete your last login provider this is not allowed
    User:
      allOf:
      - $ref: '#/components/schemas/IdentifyingData'
      - $ref: '#/components/schemas/MutationTimestamps'
      - $ref: '#/components/schemas/UserInCommonDetails'
      - $ref: '#/components/schemas/UserHasLoggedInWithGithub'
      - $ref: '#/components/schemas/UserHasLoggedInWithEmail'
      - $ref: '#/components/schemas/UserHasLoggedInWithApple'
    UserLoginData:
      allOf:
        - $ref: '#/components/schemas/UserGithubDetails'
        - $ref: '#/components/schemas/UserEmailDetails'
        - $ref: '#/components/schemas/UserAppleDetails'
        - $ref: '#/components/schemas/UserInCommonAuthorizationDetails'
        - oneOf:
            - required:
                - githubSessionCode
            - required:
                - email
                - password
            - required:
                - appleTokenAuthorizationCode
    IdentifyingData:
      properties:
        id:
          type: string
        type:
          type: string
      type: object
    MutationTimestamps:
      properties:
        createTime:
          type: string
        updateTime:
          type: string
        deleteTime:
          type: string
      type: object
    DescriptiveMetadata:
      properties:
        title:
          type: string
        body:
          type: string
      type: object
    MutableAuthorizationOwnershipMetadata:
      properties:
        owner:
          type: string
      type: object
    MutableActionableOwnershipMetadata:
      properties:
        assignee:
          type: string
        requestor:
          type: string
      type: object
    ImmutableAuthorizationOwnershipData:
      properties:
        creator:
          type: string
      type: object
    MutableOwnershipMetadata:
      allOf:
      - $ref: '#/components/schemas/MutableAuthorizationOwnershipMetadata'
      - $ref: '#/components/schemas/MutableActionableOwnershipMetadata'
      - $ref: '#/components/schemas/ImmutableAuthorizationOwnershipData'
    OwnershipMetadata:
      allOf:
      - $ref: '#/components/schemas/MutableOwnershipMetadata'
      - $ref: '#/components/schemas/ImmutableAuthorizationOwnershipData'
    Project:
      allOf:
      - $ref: '#/components/schemas/IdentifyingData'
      - $ref: '#/components/schemas/MutationTimestamps'
      - $ref: '#/components/schemas/DescriptiveMetadata'
      - $ref: '#/components/schemas/MutableAuthorizationOwnershipMetadata'
      - $ref: '#/components/schemas/ImmutableAuthorizationOwnershipData'
    ProjectUpdate:
      allOf:
      - $ref: '#/components/schemas/DescriptiveMetadata'
      - $ref: '#/components/schemas/MutableAuthorizationOwnershipMetadata'
    ProjectCreate:
      allOf:
      - required:
        - owner
        - title
      - $ref: '#/components/schemas/DescriptiveMetadata'
      - $ref: '#/components/schemas/MutableAuthorizationOwnershipMetadata'
    Error:
      properties:
        message:
          type: string
        code:
          type: string
      type: object
    inline_response_200:
      example:
        jwt: jwt
      properties:
        jwt:
          type: string
      required:
      - jwt
