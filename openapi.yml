openapi: 3.0.0
info:
  title: Agile Fridge RESTful API
  version: 1.0.0
paths:
  /issues:
    get:
      summary: Optionally looks for issues that comply with the filters applied
      operationId: listIssues
      parameters:
        - in: query
          name: search
          schema:
            type: string
        - $ref: '#/components/parameters/Id'
        - in: query
          name: type
          schema:
            type: string
        - in: query
          name: createTime
          schema:
            type: string
        - in: query
          name: updateTime
          schema:
            type: string
        - in: query
          name: projectId
          schema:
            type: string
        - in: query
          name: owner
          schema:
            type: string
        - in: query
          name: creator
          schema:
            type: string
        - in: query
          name: assignee
          schema:
            type: string
        - in: query
          name: requestor
          schema:
            type: string
      responses:
        200:
          description: Successfully returned issues
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Issue'
        400:
          description: Client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Creates an issue
      operationId: createIssue
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueCreate'
      responses:
        204:
          description: The issue was created
        400:
          description: Client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Updates an issue
      operationId: updateIssue
      parameters:
        - $ref: '#/components/parameters/RequiredId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueUpdate'
      responses:
        204:
          description: The issue was updated
        400:
          description: Client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Deletes an issue
      operationId: deleteIssue
      parameters:
        - $ref: '#/components/parameters/RequiredId'
      responses:
        204:
          description: The issue was deleted
        400:
          description: Client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /user:
    get:
      summary: Retrieves information about the user
      operationId: getCurrentUser
      parameters:
        - in: query
          name: search
          schema:
            type: string
        - $ref: '#/components/parameters/Id'
      responses:
        200:
          description: Successfully returned users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        400:
          description: Client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Creates a user
      operationId: signUp
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        204:
          description: The user was created
        400:
          description: Client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Updates a user
      operationId: updateCurrentUser
      parameters:
        - $ref: '#/components/parameters/RequiredId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        204:
          description: The user was updated
        400:
          description: Client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Deletes a user
      operationId: deleteUser
      parameters:
        - $ref: '#/components/parameters/RequiredId'
      responses:
        204:
          description: The user was deleted
        400:
          description: Client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /user/session:
    post:
      summary: Login
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - type: object
                  properties:
                    githubSessionCode:
                      type: string
                    email:
                      type: string
                    password:
                      type: string
                    appleTokenAuthorizationCode:
                      type: string
                - oneOf:
                    - required:
                        - githubSessionCode
                    - required:
                        - email
                        - password
                    - required:
                        - appleTokenAuthorizationCode
      responses:
        200:
          description: The session was created successfully
          content:
            application/json:
              schema:
                type: object
                required:
                  - jwt
                properties:
                  jwt:
                    type: string
        400:
          description: Client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects:
    get:
      summary: Optionally looks for projects that comply with the filters applied
      operationId: listProjects
      parameters:
        - in: query
          name: search
          schema:
            type: string
        - $ref: '#/components/parameters/Id'
        - in: query
          name: createTime
          schema:
            type: string
        - in: query
          name: updateTime
          schema:
            type: string
        - in: query
          name: owner
          schema:
            type: string
        - in: query
          name: creator
          schema:
            type: string
      responses:
        200:
          description: Successfully returned projects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
        400:
          description: Client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Creates a project
      operationId: createProject
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectCreate'
      responses:
        204:
          description: The project was created
        400:
          description: Client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Updates a project
      operationId: updateProject
      parameters:
        - $ref: '#/components/parameters/RequiredId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectUpdate'
      responses:
        204:
          description: The project was updated
        400:
          description: Client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Deletes a project
      operationId: deleteProject
      parameters:
        - in: query
          name: cascadingDelete
          required: false
          schema:
            type: boolean
        - $ref: '#/components/parameters/RequiredId'
      responses:
        204:
          description: The project was deleted
        400:
          description: Client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  parameters:
    Id:
      in: query
      name: id
      required: false
      schema:
        type: string
    RequiredId:
      in: query
      name: id
      required: true
      schema:
        type: string
  schemas:
    # resources
    ProjectChild:
      type: object
      properties:
        projectId:
          type: string
    IssueCreate:
      allOf:
        - required:
            - title
            - body
            - projectId
        - $ref: '#/components/schemas/ProjectChild'
        - $ref: '#/components/schemas/DescriptiveMetadata'
        - $ref: '#/components/schemas/MutableOwnershipMetadata'
    IssueUpdate:
      allOf:
        - $ref: '#/components/schemas/ProjectChild'
        - $ref: '#/components/schemas/DescriptiveMetadata'
        - $ref: '#/components/schemas/MutableOwnershipMetadata'
    Issue:
      allOf:
        - $ref: '#/components/schemas/IdentifyingData'
        - $ref: '#/components/schemas/MutationTimestamps'
        - $ref: '#/components/schemas/ProjectChild'
        - $ref: '#/components/schemas/DescriptiveMetadata'
        - $ref: '#/components/schemas/OwnershipMetadata'
    UserInCommonDetails:
      type: object
      properties:
        displayName:
          type: string
        email:
          type: string
    UserGithubDetails:
      type: object
      properties:
        githubToken:
          type: string
    UserEmailDetails:
      type: object
      properties:
        password:
          type: string
    UserAppleDetails:
      type: object
      properties:
        appleTokenAuthorizationCode:
          type: string
    UserLoginData:
      anyOf:
        - $ref: '#/components/schemas/UserGithubDetails'
        - $ref: '#/components/schemas/UserEmailDetails'
        - $ref: '#/components/schemas/UserAppleDetails'
    UserHasLoggedInWithGithub:
      type: object
      required:
        - hasLoggedInWithGithub
      properties:
        hasLoggedInWithGithub:
          type: boolean
    UserHasLoggedInWithEmail:
      type: object
      required:
        - hasLoggedInWithEmail
      properties:
        hasLoggedInWithEmail:
          type: boolean
    UserHasLoggedInWithApple:
      type: object
      required:
        - hasLoggedInWithApple
      properties:
        hasLoggedInWithApple:
          type: boolean
    UserCreate:
      allOf:
        - $ref: '#/components/schemas/UserInCommonDetails'
        - $ref: '#/components/schemas/UserLoginData'
        - required:
            - displayName
            # this can sometimes be provided by the response given back from the login provider
            - email
        # supported login methods
        - anyOf:
            - required:
                - githubToken
            - required:
                - password
            - required:
                - appleTokenAuthorizationCode
    UserUpdate:
      description: if you delete your last login provider this is not allowed
      anyOf:
        - $ref: '#/components/schemas/UserInCommonDetails'
    User:
      allOf:
        - $ref: '#/components/schemas/IdentifyingData'
        - $ref: '#/components/schemas/MutationTimestamps'
        - $ref: '#/components/schemas/UserInCommonDetails'
        - $ref: '#/components/schemas/UserHasLoggedInWithGithub'
        - $ref: '#/components/schemas/UserHasLoggedInWithEmail'
        - $ref: '#/components/schemas/UserHasLoggedInWithApple'
    # shared properties
    IdentifyingData:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
    MutationTimestamps:
      type: object
      properties:
        createTime:
          type: string
        updateTime:
          type: string
        deleteTime:
          type: string
    DescriptiveMetadata:
      type: object
      properties:
        title:
          type: string
        body:
          type: string
    MutableAuthorizationOwnershipMetadata:
      type: object
      properties:
        owner:
          type: string
    MutableActionableOwnershipMetadata:
      type: object
      properties:
        assignee:
          type: string
        requestor:
          type: string
    ImmutableAuthorizationOwnershipData:
      type: object
      properties:
        creator:
          type: string
    MutableOwnershipMetadata:
      allOf:
        - $ref: '#/components/schemas/MutableAuthorizationOwnershipMetadata'
        - $ref: '#/components/schemas/MutableActionableOwnershipMetadata'
        - $ref: '#/components/schemas/ImmutableAuthorizationOwnershipData'
    OwnershipMetadata:
      allOf:
        - $ref: '#/components/schemas/MutableOwnershipMetadata'
        - $ref: '#/components/schemas/ImmutableAuthorizationOwnershipData'
    Project:
      allOf:
        - $ref: '#/components/schemas/IdentifyingData'
        - $ref: '#/components/schemas/MutationTimestamps'
        - $ref: '#/components/schemas/DescriptiveMetadata'
        - $ref: '#/components/schemas/MutableAuthorizationOwnershipMetadata'
        - $ref: '#/components/schemas/ImmutableAuthorizationOwnershipData'
    ProjectUpdate:
      allOf:
        - $ref: '#/components/schemas/DescriptiveMetadata'
        - $ref: '#/components/schemas/MutableAuthorizationOwnershipMetadata'
    ProjectCreate:
      allOf:
        - required:
            - title
            - owner
        - $ref: '#/components/schemas/DescriptiveMetadata'
        - $ref: '#/components/schemas/MutableAuthorizationOwnershipMetadata'

    # errors
    Error:
      type: object
      properties:
        message:
          type: string
        code:
          type: string
